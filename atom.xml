<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wanghao Blogs</title>
  <subtitle>但行好事 莫问前程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-25T15:58:04.995Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wanghao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6总结</title>
    <link href="http://yoursite.com/2017/07/25/ES6%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/07/25/ES6总结/</id>
    <published>2017-07-25T08:38:10.000Z</published>
    <updated>2017-07-25T15:58:04.995Z</updated>
    
    <content type="html"><![CDATA[<p>目录</p>
<p>1.var 和 let/const 的比较用<br>2.块级作用域代替 IIFES<br>3.箭头函数<br>4.字符串<br>5.解构<br>6.模块</p>
<pre><code>var 和 let/const 的比较
</code></pre><p>除了 var ，我们现在还可以使用两个新的标示符来定义一个变量 —— let 和 const。和 var 不一样的是，let 和 const 不存在变量提升。<br>使用 var 的栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var snack = &apos;Meow Mix&apos;;</div><div class="line">function getFood(food) &#123;</div><div class="line">    if (food) &#123;</div><div class="line">        var snack = &apos;Friskies&apos;;</div><div class="line">        return snack;</div><div class="line">    &#125;</div><div class="line">    return snack;</div><div class="line">&#125;</div><div class="line">getFood(false); // undefined</div><div class="line">alert(&apos;Hello World!&apos;);</div><div class="line"></div></pre></td></tr></table></figure>
<p>当我们用 let 代替 var 的时候：<br>    let snack = ‘Meow Mix’;<br>    function getFood(food) {<br>        if (food) {<br>            let snack = ‘Friskies’;<br>            return snack;<br>        }<br>        return snack;<br>    }<br>    getFood(false); // ‘Meow Mix’<br>当我们重构使用 var 的老代码的时候应该注意上面的变化。盲目地使用 let 替换 var 可能会出现出乎意料的情况。</p>
<p>注意：let 和 const 是块级作用域，因此在变量未被定义之前使用它会产生一个 ReferenceError。<br>    console.log(x); // ReferenceError: x is not defined<br>    let x = ‘hi’;</p>
<p>在遗留代码中放弃使用 var 声明意味着需要很小心地重构；在新的项目代码中，使用 let 声明一个可以改变的变量，用 const 声明一个不能被重新赋值的变量。<br>用块级作用域代替 IIFES</p>
<p>函数立即执行表达式 的通常用途是创造一个内部的作用域，在 ES6 中，我们能够创造一个块级作用域而不仅限于函数作用域：<br>    IIFES：</p>
<pre><code>(function () {
    var food = &apos;Meow Mix&apos;;
}());
console.log(food); // Reference Error
</code></pre><p>使用 ES6 的块级作用域：</p>
<p>{<br>    let food = ‘Meow Mix’;<br>}<br>console.log(food); // Reference Error</p>
<pre><code>箭头函数
</code></pre><p>我们经常需要给回调函数维护一个词法作用域的上下文 this。<br>看看这个栗子：</p>
<pre><code>function Person(name) {
    this.name = name;
}
Person.prototype.prefixName = function (arr) {
    return arr.map(function (character) {
        return this.name + character; // Cannot read property &apos;name&apos; of undefined
    });
};
</code></pre><p>一个常用的解决办法是把 this 存在一个变量中：</p>
<pre><code>function Person(name) {
    this.name = name;
}
Person.prototype.prefixName = function (arr) {
    var that = this; // Store the context of this
    return arr.map(function (character) {
        return that.name + character;
    });
};
</code></pre><p>我们也可以传递一个合适的 this 上下文：</p>
<pre><code>function Person(name) {
    this.name = name;
}
Person.prototype.prefixName = function (arr) {
    return arr.map(function (character) {
        return this.name + character;
    }, this);
}
</code></pre><p>我们还可以绑定上下文：</p>
<p>function Person(name) {<br>    this.name = name;<br>}<br>Person.prototype.prefixName = function (arr) {<br>    return arr.map(function (character) {<br>        return this.name + character;<br>    }.bind(this));<br>};<br>使用箭头函数，this 将不会受到影响，并且我们可以重写上面的函数：</p>
<p>function Person(name) {<br>    this.name = name;<br>}<br>Person.prototype.prefixName = function (arr) {<br>    return arr.map(character =&gt; this.name + character);<br>};</p>
<p>当你需要维护一个 this 上下文的时候使用 箭头函数。<br>在我们写一个函数的时候，箭头函数更加简洁并且可以很简单地返回一个值：</p>
<p>var squares = arr.map(function (x) { return x <em> x }); // Function Expression<br>const arr = [1, 2, 3, 4, 5];<br>const squares = arr.map(x =&gt; x </em> x); // Arrow Function for terser implementation</p>
<p>字符串</p>
<p>在 ES6 中，标准库升级了很多，在这些变化中有许多新的对于字符串的函数，比如 .includes() 和 .repeat()。</p>
<p>.includes( )</p>
<p>var string = ‘food’;<br>var substring = ‘foo’;<br>console.log(string.indexOf(substring) &gt; -1);<br>之前我们使用 indexOf() 函数的返回值是否 &gt;-1 来判断字符串是否包含某些字符串，现在我们更简单地使用 .includes() 来返回一个布尔值来判断：</p>
<p>const string = ‘food’;<br>const substring = ‘foo’;<br>console.log(string.includes(substring)); // true<br>.repeat( )</p>
<p>function repeat(string, count) {<br>    var strings = [];<br>    while(strings.length &lt; count) {<br>        strings.push(string);<br>    }<br>    return strings.join(‘’);<br>}<br>在 ES6 中，可以更简便地实现：</p>
<p>// String.repeat(numberOfRepetitions)<br>‘meow’.repeat(3); // ‘meowmeowmeow’<br>模版字符串</p>
<p>使用 模版字符串 我们就可以不用对某些特殊自负进行转义处理了：</p>
<p>var text = “This string contains \”double quotes\” which are escaped.”;<br>let text = <code>This string contains &quot;double quotes&quot; which don&#39;t need to be escaped anymore.</code>;<br>模版字符串 还支持插入，可以把变量值和字符串连接起来.</p>
<p>var name = ‘Tiger’;<br>var age = 13;<br>console.log(‘My cat is named ‘ + name + ‘ and is ‘ + age + ‘ years old.’);<br>更简单：</p>
<p>const name = ‘Tiger’;<br>const age = 13;<br>console.log(<code>My cat is named ${name} and is ${age} years old.</code>);<br>在 ES5 中，需要换行时，需要这样：</p>
<p>var text = (<br>    ‘cat\n’ +<br>    ‘dog\n’ +<br>    ‘nickelodeon’<br>);<br>或者这样：</p>
<p>var text = [<br>    ‘cat’,<br>    ‘dog’,<br>    ‘nickelodeon’<br>].join(‘\n’);<br>模版字符串 可以支持换行并且不需要额外的处理：</p>
<p>let text = ( <code>cat
dog
nickelodeon</code><br>);<br>模版字符串 还支持表达式：</p>
<p>let today = new Date();<br>let text = <code>The time and date is ${today.toLocaleString()}</code>;<br>解构</p>
<p>结构可以让我们用一个更简便的语法从一个数组或者对象（即使是深层的）中分离出来值，并存储他们。</p>
<p>结构数组</p>
<p>var arr = [1, 2, 3, 4];<br>var a = arr[0];<br>var b = arr[1];<br>var c = arr[2];<br>var d = arr[3];<br>let [a, b, c, d] = [1, 2, 3, 4];<br>console.log(a); // 1<br>console.log(b); // 2<br>结构对象</p>
<p>var luke = { occupation: ‘jedi’, father: ‘anakin’ };<br>var occupation = luke.occupation; // ‘jedi’<br>var father = luke.father; // ‘anakin’<br>let luke = { occupation: ‘jedi’, father: ‘anakin’ };<br>let {occupation, father} = luke;<br>console.log(occupation); // ‘jedi’<br>console.log(father); // ‘anakin’</p>
<p>模块</p>
<p>在 ES6 之前，我们使用 Browserify 这样的库来创建客户端的模块化，在 node.js 中使用 require。<br>在 ES6 中，我们可以直接使用所有类型的模块化（AMD 和 CommonJS）。</p>
<p>使用 CommonJS 的出口</p>
<p>module.exports = 1;<br>module.exports = { foo: ‘bar’ };<br>module.exports = [‘foo’, ‘bar’];<br>module.exports = function bar () {};</p>
<p>使用 ES6 的出口<br>在 ES6 中我们可以暴露多个值，使用 Exports：</p>
<p>export let name = ‘David’;<br>export let age  = 25;​​<br>或者暴露一个对象列表：</p>
<p>function sumTwo(a, b) {<br>    return a + b;<br>}<br>function sumThree(a, b, c) {<br>    return a + b + c;<br>}<br>export { sumTwo, sumThree };<br>我们还可以暴露函数、对象和其他的值，通过简单地使用 export 这个关键字：</p>
<p>export function sumTwo(a, b) {<br>    return a + b;<br>}<br>export function sumThree(a, b, c) {<br>    return a + b + c;<br>}<br>最后，我们还可以绑定一个默认的输出：</p>
<p>function sumTwo(a, b) {<br>    return a + b;<br>}<br>function sumThree(a, b, c) {<br>    return a + b + c;<br>}<br>let api = {<br>    sumTwo,<br>    sumThree<br>};<br>export default api;<br>/* Which is the same as</p>
<ul>
<li>export { api as default };<br>*/<br>总是在模块的最后面使用 export default 方法，这可以让暴露的东西更加清晰并且可以节省时间去找出暴露出来值的名字。尤其如此，在 CommonJS 中通常的实践就是暴露一个简单的值或者对象。坚持这种模式，可以让我们的代码更加可读，并且在 ES6 和 CommonJS 模块之间更好地兼容。</li>
</ul>
<p>ES6 中的导入<br>在 ES6 中同样提供了多样的导入方式，我们可以这么导入一个整个文件：</p>
<p>import ‘underscore’;<br>需要着重注意的一点是简单的导入整个文件会在那个文件的顶部执行所有的代码<br>和 Python 中类似，我们可以命名导入的值：</p>
<p>import { sumTwo, sumThree } from ‘math/addition’;<br>我们还可以重命名导入：</p>
<p>import {<br>    sumTwo as addTwoNumbers,<br>    sumThree as sumThreeNumbers<br>} from ‘math/addition’;<br>另外，我们可以导入所有的东西（整体加载）：</p>
<p>import * as util from ‘math/addition’;<br>最后，我们可以从一个模块中导入一个值的列表：</p>
<p>import * as additionUtil from ‘math/addition’;<br>const { sumTwo, sumThree } = additionUtil;<br>可以像这样导入默认绑定的输出：</p>
<p>import api from ‘math/addition’;<br>// Same as: import { default as api } from ‘math/addition’;<br>虽然最好保持出口的简单，但如果需要的话我们有时可以混合默认的进口和混合进口。当我们这样出口的时候：</p>
<p>// foos.js<br>export { foo as default, foo1, foo2 };<br>我们可以这样导入它们：</p>
<p>import foo, { foo1, foo2 } from ‘foos’;<br>当我们用 commonjs 的语法导入一个模块的出口时（比如 React），我们可以这样做：</p>
<p>import React from ‘react’;<br>const { Component, PropTypes } = React;<br>还有更精简的写法：</p>
<p>import React, { Component, PropTypes } from ‘react’;<br>导出的值是动态引用的，而不是拷贝。因此，在一个模块中改变一个变量的绑定将影响输出模块中的值。应该避免改变这些导出值的公共接口。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目录&lt;/p&gt;
&lt;p&gt;1.var 和 let/const 的比较用&lt;br&gt;2.块级作用域代替 IIFES&lt;br&gt;3.箭头函数&lt;br&gt;4.字符串&lt;br&gt;5.解构&lt;br&gt;6.模块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var 和 let/const 的比较
&lt;/code&gt;&lt;/pre&gt;&lt;p
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
</feed>
